package org.androidpn.demoapp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.MessageTypeFilter;
import org.jivesoftware.smack.filter.PacketFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.util.StringUtils;

import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

public class ChatActivity extends Activity {
	private String LOGTAG="ChatActivity";
	private XMPPConnection connection;
	List messages;
	public String USERNAME;
	public String PASSWORD;
	public String recipient="";//who you are talking with
	private Handler mHandler = new Handler();
	private EditText textMessage;
	private ListView listview;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Log.i("XMPPChat","hello i am oncreate");
		USERNAME = getIntent().getStringExtra("userID");
		PASSWORD = getIntent().getStringExtra("Pwd");
		
		textMessage = (EditText) this.findViewById(R.id.textMessage);
		listview = (ListView) this.findViewById(R.id.listMessages);
		
		Log.i("XMPPChat","hello i am oncreate Button send");
		// Set a listener to send a chat text message
		Button send = (Button) this.findViewById(R.id.sendBtn);
//		send.setOnClickListener(new View.OnClickListener() {
//			public void onClick(View view) {
//				String to = recipient;
//				String text = textMessage.getText().toString();
//
//				Log.i("XMPPChatDemoActivity", "Sending text " + text + " to " + to);
//				Message msg = new Message(to, Message.Type.chat);
//				msg.setBody(text);				
//				if (connection != null) {
//					connection.sendPacket(msg);
////					messages.add(connection.getUser() + ":");
////					messages.add(text);
//					//selectItem(side);
//				}
//				textMessage.setText("");
//			}
//		});
		Log.i("XMPPCHat","connect();");
		connect();
		setContentView(R.layout.activity_chat);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.chat, menu);
		return true;
	}
	
	public void setReceiveHandling(XMPPConnection connection) {
		this.connection = connection;
		if (connection != null) {
			// Add a packet listener to get messages sent to us
			PacketFilter filter = new MessageTypeFilter(Message.Type.chat);
			connection.addPacketListener(new PacketListener() {
				@Override
				public void processPacket(Packet packet) {
					Message message = (Message) packet;
					if (message.getBody() != null) {
						String fromName = StringUtils.parseBareAddress(message
								.getFrom());
						Log.i("XMPPChatDemoActivity", "Text Recieved " + message.getBody()
								+ " from " + fromName );
						messages.add(fromName + ":");
						messages.add(message.getBody());
						// Add the incoming message to the list view
//						mHandler.post(new Runnable() {
//							public void run() {
//								//selectItem(side);
//							}
//						});
					}
				}
			}, filter);
		}

	}
	
